:100755 100755 e5efd15... 47eee1a... M	src/lua_tree_editor.c

diff --git work/newick-utils-1.6/src/lua_tree_editor.c work/newick-utils-1.6/src/lua_tree_editor.c
index e5efd15..47eee1a 100755
--- work/newick-utils-1.6/src/lua_tree_editor.c
+++ work/newick-utils-1.6/src/lua_tree_editor.c
@@ -613,6 +613,33 @@ static void set_predefined_variables(struct rnode *node, lua_State *L)
 	assert(lua_gettop(L) == initial_lua_stack_size);
 }
 
+/* Pushes onto the stack the function at index '*phase' in the globals table. */
+// TODO: try lua_getglobal!!!
+
+static void get_user_hook(lua_State *L, const char *phase)
+{
+		const lua_Number *version = lua_version(L);
+		lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS);
+		lua_getfield(L, -1, NODE);
+		//lua_getfield(L, LUA_GLOBALSINDEX, NODE);
+}
+
+/* Sets the element at index '*phase' in the globals table to the hook function
+ * at the top of the stack. */
+
+static void set_user_hook(lua_State *L, const char *phase)
+{
+		/* hook is at -1 */
+		const lua_Number *version = lua_version(L);
+		lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS);
+		/* hook at -2, globals table at -1 */
+		lua_insert(L, -2);
+		/* globals at -2, hook at -1 */
+		lua_setfield(L, -2, NODE);
+		//lua_getfield(L, LUA_GLOBALSINDEX, NODE);
+}
+
+
 static void process_tree(struct rooted_tree *tree, lua_State *L,
 		struct parameters params)
 {
@@ -649,7 +676,7 @@ static void process_tree(struct rooted_tree *tree, lua_State *L,
 		} 
 
 		set_predefined_variables(current_node, L);
-		lua_getfield(L, LUA_GLOBALSINDEX, NODE);
+		lua_getglobal(L, NODE);
 		lua_call(L, 0, 0);
 	} /* loop over all nodes */
 
@@ -756,7 +783,7 @@ static void load_lua_condition(lua_State * L, char *lua_condition)
 		printf("%s\n", msg);
 		exit(EXIT_FAILURE);
 	}
-	lua_setfield(L, LUA_GLOBALSINDEX, CONDITION);
+	lua_setglobal(L, CONDITION);
 }
 
 static void load_lua_action(lua_State *L, char *lua_action)
@@ -768,7 +795,7 @@ static void load_lua_action(lua_State *L, char *lua_action)
 		printf("%s\n", msg);
 		exit(EXIT_FAILURE);
 	}
-	lua_setfield(L, LUA_GLOBALSINDEX, ACTION);
+	lua_setglobal(L, ACTION);
 }
 
 static void run_user_hooks_file(lua_State * L, char *user_hooks_filename)
@@ -927,7 +954,7 @@ static int lua_cli_process_node(lua_State *L)
 	if (NULL == lnode)
 		luaL_error(L, "N is not a node");
 
-	lua_getfield(L, LUA_GLOBALSINDEX, CONDITION);
+	lua_getglobal(L, CONDITION);
 	lua_call(L, 0, 1);
 	if (lua_isboolean(L, -1) != 1) {
 		fprintf(stderr, "WARNING: condition does not evaluate "
@@ -938,10 +965,10 @@ static int lua_cli_process_node(lua_State *L)
 	int match = lua_toboolean(L, -1);
 	lua_pop(L, 1);
 	if (match) {
-		lua_getfield(L, LUA_GLOBALSINDEX, ACTION);
+		lua_getglobal(L, ACTION);
 		lua_call(L, 0, 0);
 		/* see -o switch */
-		lua_getfield(L, LUA_GLOBALSINDEX, STOP_AT_1ST_MATCH);
+		lua_getglobal(L, STOP_AT_1ST_MATCH);
 		int stop_clade_at_first_match = lua_toboolean(L, -1);
 		lua_pop(L, 1);
 		if (stop_clade_at_first_match)
@@ -953,7 +980,7 @@ static int lua_cli_process_node(lua_State *L)
 // TODO: implement __tostring for lua_rnode
 
 /* Functions for Lua node */
-static const struct luaL_reg lnodelib_f [] = {
+static const struct luaL_Reg lnodelib_f [] = {
 	{"set", lua_node_set},
 	{"get", lua_node_get},
 	{NULL, NULL}
@@ -979,9 +1006,10 @@ static int luaopen_lnode (lua_State *L)
 	return 0;
 }
 
+
 static void run_user_hook(lua_State *L, const char *phase)
 {
-	lua_getfield(L, LUA_GLOBALSINDEX, phase);
+	lua_getglobal(L, phase);
 	// TODO: this lua_isfunction() check should be done once and for all,
 	// before the tree is processed, like for the NODE function (see main(),
 	// around l. 956
@@ -997,7 +1025,7 @@ int main(int argc, char* argv[])
 	struct rooted_tree *tree;
 
 	/* Initializes Lua */
-	lua_State *L = lua_open();   
+	lua_State *L = luaL_newstate();   
 	luaL_openlibs(L);
 
 	lua_pushcfunction(L, lua_print_subclade);
@@ -1017,8 +1045,9 @@ int main(int argc, char* argv[])
 	}
 
 	if (NULL != params.user_hooks_filename) {
+		/* Get the node() function defined by the user */
 		run_user_hooks_file(L, params.user_hooks_filename);
-		lua_getfield(L, LUA_GLOBALSINDEX, NODE);
+		lua_getglobal(L, NODE);
 		int NODE_type = lua_type(L, -1);
 		switch(NODE_type) {
 		case LUA_TFUNCTION:
:100755 100755 4aefb5a... ecdc57b... M	configure.ac

diff --git work/newick-utils-1.6/configure.ac work/newick-utils-1.6/configure.ac
index 4aefb5a..ecdc57b 100755
--- work/newick-utils-1.6/configure.ac
+++ work/newick-utils-1.6/configure.ac
@@ -95,7 +95,7 @@ AS_IF([test "x$with_lua" = xyes],
 		AM_CPPFLAGS="$AM_CPPFLAGS $CPPFLAGS"
 	 	AC_CHECK_HEADERS([lua.h], [], [with_lua=no_hdr])
 		AM_CPPFLAGS="$OLD_AM_CPPFLAGS"
-		AC_SEARCH_LIBS([luaL_openlibs], [lua5.1 lua-5.1 lua],
+		AC_SEARCH_LIBS([luaL_openlibs], [lua5.2 lua-5.2.1 lua],
 					   [], [with_lua=no_lib])
 	]
 )
